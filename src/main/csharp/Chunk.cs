// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/nigelgott/terra/protobufs/chunk.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NigelGott.Terra.Protobufs {

  /// <summary>Holder for reflection information generated from com/nigelgott/terra/protobufs/chunk.proto</summary>
  public static partial class ChunkReflection {

    #region Descriptor
    /// <summary>File descriptor for com/nigelgott/terra/protobufs/chunk.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChunkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ciljb20vbmlnZWxnb3R0L3RlcnJhL3Byb3RvYnVmcy9jaHVuay5wcm90byI1",
            "CgxDaHVua01lc3NhZ2USCQoBeBgBIAEoBRIJCgF5GAIgASgFEg8KB2hlaWdo",
            "dHMYAyADKAVCOwodY29tLm5pZ2VsZ290dC50ZXJyYS5wcm90b2J1ZnOqAhlO",
            "aWdlbEdvdHQuVGVycmEuUHJvdG9idWZzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NigelGott.Terra.Protobufs.ChunkMessage), global::NigelGott.Terra.Protobufs.ChunkMessage.Parser, new[]{ "X", "Y", "Heights" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChunkMessage : pb::IMessage<ChunkMessage> {
    private static readonly pb::MessageParser<ChunkMessage> _parser = new pb::MessageParser<ChunkMessage>(() => new ChunkMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChunkMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NigelGott.Terra.Protobufs.ChunkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkMessage(ChunkMessage other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      heights_ = other.heights_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkMessage Clone() {
      return new ChunkMessage(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "heights" field.</summary>
    public const int HeightsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_heights_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> heights_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Heights {
      get { return heights_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChunkMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChunkMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if(!heights_.Equals(other.heights_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      hash ^= heights_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      heights_.WriteTo(output, _repeated_heights_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      size += heights_.CalculateSize(_repeated_heights_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChunkMessage other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      heights_.Add(other.heights_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            heights_.AddEntriesFrom(input, _repeated_heights_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
